# CredPal: Credit Card Points Management Platform - Replit Hackathon Prompt

## Project Overview
Build a fully functional webapp called "CredPal" on Replit that helps users track, manage, and redeem their credit card reward points across multiple bank accounts. The platform will serve as a centralized dashboard for credit card points management with additional financial services like UPI payments and micro-loans.

## Replit-Specific Setup Instructions

### Creating Your Replit Project
1. Create a new Replit project using the "Full Stack App" template (which provides Node.js + React)
2. Alternative: Choose the "Node.js" template and manually set up the frontend

### Development Environment Configuration
- **Language**: JavaScript/TypeScript
- **Replit Database**: Utilize Replit's built-in key-value database for storing user data and card information
- **Secrets Management**: Store sensitive configuration in Replit's Secrets tool (environment variables)
- **Always On**: Enable this feature during demo to ensure your app remains running

## Tech Stack for Replit

### Frontend
- **Framework**: React.js (supported directly in Replit)
- **UI Library**: Use either:
  - Bootstrap (via CDN import in your HTML)
  - Tailwind CSS (installable via npm in Replit)
  - Material-UI (installable via npm in Replit)
- **State Management**: React Context API (simpler for hackathon scope)
- **Charts**: Chart.js (lightweight and easy to implement in Replit)
- **Routing**: React Router (installable via npm)

### Backend
- **Runtime**: Node.js with Express.js (fully supported by Replit)
- **Database Options**:
  - Replit Database (native key-value store, simplest option)
  - SQLite (for relational data, works well on Replit)
  - MongoDB (connect to a free MongoDB Atlas instance)
- **Authentication**: JWT with secure HTTP-only cookies
- **File Structure**:
  ```
  /
  ├── public/            # Static assets
  ├── src/
  │   ├── components/    # React components
  │   ├── pages/         # Page components
  │   ├── services/      # API service functions
  │   ├── context/       # React context for state management
  │   ├── utils/         # Utility functions
  │   └── App.jsx        # Main application component
  ├── server/
  │   ├── routes/        # API routes
  │   ├── controllers/   # Request handlers
  │   ├── models/        # Data models
  │   ├── middleware/    # Express middleware
  │   └── index.js       # Server entry point
  ├── package.json       # Dependencies
  └── .replit            # Replit configuration
  ```

### Deployment
- Automatically deployed through Replit
- Accessible via the generated Replit URL

## Core Features Implementation

### 1. User Authentication System
- Implement using Replit Database to store user credentials
- Create these endpoints:
  - `POST /api/auth/register`
  - `POST /api/auth/login`
  - `POST /api/auth/logout`
  - `GET /api/auth/user`
- Store JWT in HTTP-only cookies for security

### 2. Bank Account & Card Integration (Mock)
- Create a JSON file with mock bank data:
  ```javascript
  const banks = [
    {
      id: "hdfc",
      name: "HDFC Bank",
      logo: "/assets/banks/hdfc.png",
      cardTypes: ["Regalia", "Millennia", "Diners Club"],
      conversionRates: {
        "Regalia": 0.25, // 1 point = ₹0.25
        "Millennia": 0.20,
        "Diners Club": 0.33
      }
    },
    // Add more banks (ICICI, SBI, Axis, etc.)
  ];
  ```

- Endpoints for card management:
  - `GET /api/cards` - List user's cards
  - `POST /api/cards` - Add a new card
  - `PUT /api/cards/:id` - Update card details
  - `DELETE /api/cards/:id` - Remove a card

### 3. Points Tracking Dashboard
- Store points data in Replit Database with this structure:
  ```javascript
  {
    userId: "user123",
    cards: [
      {
        id: "card1",
        bankId: "hdfc",
        cardType: "Regalia",
        lastFourDigits: "4587",
        expiryDate: "05/26",
        points: 12500,
        pointsExpiryDate: "2023-12-31",
        transactions: [
          {
            id: "tx1",
            date: "2023-01-15",
            description: "Amazon Purchase",
            amount: 5000,
            pointsEarned: 100
          }
          // More transactions
        ]
      }
      // More cards
    ]
  }
  ```

- Create React components:
  - `DashboardSummary.jsx` - Shows total points across all cards
  - `PointsChart.jsx` - Displays points earned over time
  - `CardList.jsx` - Lists all user cards with points balance
  - `ExpiringPoints.jsx` - Alerts for soon-to-expire points

### 4. Redemption Platform
- Create a mock redemption catalog:
  ```javascript
  const redemptionOptions = [
    {
      id: "cashback",
      category: "Cashback",
      options: [
        {
          id: "cb1",
          name: "Statement Credit",
          description: "Apply points as credit to your card statement",
          conversionRate: 0.25, // ₹0.25 per point
          minPoints: 1000
        }
        // More options
      ]
    },
    // More categories (Travel, Shopping, Gift Cards, etc.)
  ];
  ```

- Implement these components:
  - `RedemptionMarketplace.jsx` - Browse redemption options
  - `RedemptionCalculator.jsx` - Calculate value of points
  - `RedemptionHistory.jsx` - Track past redemptions

### 5. Smart Recommendations
- Implement a simple algorithm that:
  - Sorts redemption options by points value
  - Prioritizes options with expiring points
  - Matches user preferences from previous redemptions

## Pages to Develop in React

### 1. Landing Page (`/`)
- Hero section with app description
- Features section with icons
- Benefits section
- Call-to-action buttons

### 2. Authentication Pages
- Register page (`/register`)
- Login page (`/login`)
- Forgot password page (`/forgot-password`)

### 3. Dashboard (`/dashboard`)
- Points summary at the top
- Cards list with points balance
- Recent transactions
- Upcoming point expirations

### 4. Card Management (`/cards`)
- Add card form
- List of existing cards
- Card details view
- Transaction history by card

### 5. Redemption Marketplace (`/redeem`)
- Categories navigation
- Redemption options grid
- Option details view
- Redemption confirmation process

### 6. Mock UPI Payments (`/payments`)
- UPI ID input
- Amount input
- Option to use points for payment
- Transaction confirmation

### 7. Profile & Settings (`/profile`)
- User information management
- Notification preferences
- Theme preferences (light/dark)

## Data Models for Replit Database

### User
```javascript
{
  id: "user123",
  email: "user@example.com",
  passwordHash: "hashed_password",
  name: "John Doe",
  createdAt: "2023-01-01T00:00:00Z",
  preferences: {
    notifications: true,
    theme: "light"
  }
}
```

### Card
```javascript
{
  id: "card1",
  userId: "user123",
  bankId: "hdfc",
  cardType: "Regalia",
  lastFourDigits: "4587",
  expiryDate: "05/26",
  points: 12500,
  pointsExpiryDate: "2023-12-31"
}
```

### Transaction
```javascript
{
  id: "tx1",
  cardId: "card1",
  userId: "user123",
  date: "2023-01-15",
  description: "Amazon Purchase",
  amount: 5000,
  pointsEarned: 100
}
```

### Redemption
```javascript
{
  id: "redeem1",
  userId: "user123",
  cardId: "card1",
  optionId: "cb1",
  pointsUsed: 5000,
  valueObtained: 1250, // ₹1,250
  status: "completed",
  date: "2023-02-20"
}
```

## Step-by-Step Replit Implementation Guide

### 1. Initial Setup
```bash
# Inside your Replit console
npm init -y
npm install express cors jsonwebtoken cookie-parser bcrypt nodemon
npm install react react-dom react-router-dom axios chart.js react-chartjs-2
npm install bootstrap react-bootstrap # or material-ui or tailwindcss
```

### 2. Configure Express Server
Create `server/index.js`:
```javascript
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const { Client } = require('@replit/database');
const db = new Client();

const app = express();
app.use(express.json());
app.use(cookieParser());
app.use(cors({ origin: true, credentials: true }));

// Sample route
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'CredPal API is running' });
});

// Authentication routes
app.post('/api/auth/register', async (req, res) => {
  // Implementation
});

// More routes will go here...

// Serve static React app in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static('build'));
  app.get('*', (req, res) => {
    res.sendFile(path.resolve(__dirname, '../build', 'index.html'));
  });
}

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

### 3. Setup React App
Create or update `src/App.jsx`:
```jsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';

// Import pages
import LandingPage from './pages/LandingPage';
import Register from './pages/Register';
import Login from './pages/Login';
import Dashboard from './pages/Dashboard';
import CardManagement from './pages/CardManagement';
import RedemptionMarketplace from './pages/RedemptionMarketplace';
import Payments from './pages/Payments';
import Profile from './pages/Profile';

// Import context
import { AuthProvider } from './context/AuthContext';

function App() {
  return (
    <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<LandingPage />} />
          <Route path="/register" element={<Register />} />
          <Route path="/login" element={<Login />} />
          <Route path="/dashboard" element={<Dashboard />} />
          <Route path="/cards" element={<CardManagement />} />
          <Route path="/redeem" element={<RedemptionMarketplace />} />
          <Route path="/payments" element={<Payments />} />
          <Route path="/profile" element={<Profile />} />
        </Routes>
      </BrowserRouter>
    </AuthProvider>
  );
}

export default App;
```

### 4. Create Authentication Context
Create `src/context/AuthContext.jsx`:
```jsx
import React, { createContext, useState, useEffect } from 'react';
import axios from 'axios';

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const res = await axios.get('/api/auth/user', { withCredentials: true });
        setUser(res.data);
      } catch (err) {
        console.error('Not authenticated');
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, []);

  const login = async (email, password) => {
    try {
      const res = await axios.post('/api/auth/login', { email, password }, { withCredentials: true });
      setUser(res.data);
      return true;
    } catch (err) {
      console.error('Login failed', err);
      return false;
    }
  };

  const register = async (name, email, password) => {
    try {
      const res = await axios.post('/api/auth/register', { name, email, password }, { withCredentials: true });
      setUser(res.data);
      return true;
    } catch (err) {
      console.error('Registration failed', err);
      return false;
    }
  };

  const logout = async () => {
    try {
      await axios.post('/api/auth/logout', {}, { withCredentials: true });
      setUser(null);
    } catch (err) {
      console.error('Logout failed', err);
    }
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  );
};
```

### 5. Create Essential Components
Create base components like:
- `src/components/Navbar.jsx` - Navigation bar
- `src/components/Footer.jsx` - Page footer
- `src/components/CardForm.jsx` - Form to add/edit cards
- `src/components/PointsSummary.jsx` - Dashboard summary widget

### 6. Implement Mock Data Service
Create `src/services/mockData.js`:
```javascript
export const banks = [
  {
    id: "hdfc",
    name: "HDFC Bank",
    logo: "/assets/banks/hdfc.png",
    cardTypes: ["Regalia", "Millennia", "Diners Club"],
    conversionRates: {
      "Regalia": 0.25,
      "Millennia": 0.20,
      "Diners Club": 0.33
    }
  },
  {
    id: "icici",
    name: "ICICI Bank",
    logo: "/assets/banks/icici.png",
    cardTypes: ["Amazon Pay", "Coral", "Platinum"],
    conversionRates: {
      "Amazon Pay": 0.30,
      "Coral": 0.25,
      "Platinum": 0.20
    }
  },
  // Add more banks
];

export const redemptionOptions = [
  {
    id: "cashback",
    category: "Cashback",
    options: [
      {
        id: "cb1",
        name: "Statement Credit",
        description: "Apply points as credit to your card statement",
        conversionRate: 0.25,
        minPoints: 1000
      },
      {
        id: "cb2",
        name: "Bank Transfer",
        description: "Transfer points value to your bank account",
        conversionRate: 0.20,
        minPoints: 2000
      }
    ]
  },
  {
    id: "shopping",
    category: "Shopping",
    options: [
      {
        id: "sh1",
        name: "Amazon Voucher",
        description: "Redeem points for Amazon gift vouchers",
        conversionRate: 0.30,
        minPoints: 1000
      },
      {
        id: "sh2",
        name: "Flipkart Voucher",
        description: "Redeem points for Flipkart gift vouchers",
        conversionRate: 0.28,
        minPoints: 1000
      }
    ]
  },
  // Add more categories
];
```

### 7. Setup Replit Database Initialization
Create `server/db.js`:
```javascript
const { Client } = require('@replit/database');
const db = new Client();
const bcrypt = require('bcrypt');

// Initialize demo data
async function initializeDb() {
  const hasData = await db.get('initialized');
  if (hasData) return;
  
  // Create admin user
  const passwordHash = await bcrypt.hash('admin123', 10);
  
  await db.set('users:admin', {
    id: 'admin',
    email: 'admin@credpal.com',
    passwordHash,
    name: 'Admin User',
    createdAt: new Date().toISOString(),
    preferences: {
      notifications: true,
      theme: 'light'
    }
  });
  
  // Create sample card
  await db.set('cards:card1', {
    id: 'card1',
    userId: 'admin',
    bankId: 'hdfc',
    cardType: 'Regalia',
    lastFourDigits: '4587',
    expiryDate: '05/26',
    points: 12500,
    pointsExpiryDate: '2023-12-31'
  });
  
  // Create sample transaction
  await db.set('transactions:tx1', {
    id: 'tx1',
    cardId: 'card1',
    userId: 'admin',
    date: '2023-01-15',
    description: 'Amazon Purchase',
    amount: 5000,
    pointsEarned: 100
  });
  
  await db.set('initialized', true);
  console.log('Database initialized with sample data');
}

module.exports = { db, initializeDb };
```

### 8. Configure .replit File
Create or update `.replit` file:
```
run = "npm run dev"
entrypoint = "server/index.js"

[env]
PORT = "3000"
NODE_ENV = "development"

[packager]
language = "nodejs"

[packager.features]
packageSearch = true
guessImports = true

[languages.javascript]
pattern = "**/*.{js,jsx,ts,tsx}"
syntax = "javascript"

[nix]
channel = "stable-22_11"

[deployment]
run = ["sh", "-c", "npm start"]
deploymentTarget = "cloudrun"
```

### 9. Update package.json
Update `package.json` with these scripts:
```json
{
  "scripts": {
    "start": "node server/index.js",
    "dev": "nodemon server/index.js & npm run start:client",
    "start:client": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "proxy": "http://localhost:3000"
}
```

## Practical Tips for Replit Development

1. **Keep File Structure Clean**: Replit's editor works best with a well-organized file structure
   
2. **Use Replit Database Efficiently**: Keep keys organized with prefixes (e.g., `users:`, `cards:`)
   
3. **Debug Effectively**: Use Replit's console for debugging server-side code
   
4. **Handle CORS Properly**: Configure CORS to allow your frontend to communicate with your backend
   
5. **Store Secrets Securely**: Use Replit's Secrets tool for API keys and sensitive information
   
6. **Optimize for Replit's Resources**: Minimize dependencies and avoid resource-intensive operations
   
7. **Enable Always On**: Important for keeping your app running during demos

## Hackathon Presentation Strategy

1. **Live Demo Flow**:
   - Show account creation
   - Add multiple credit cards
   - View dashboard with points summary
   - Demonstrate redemption flow
   - Show UPI payment simulation
   
2. **Highlight Technical Achievements**:
   - Replit Database integration
   - Responsive UI design
   - State management approach
   - Authentication implementation
   
3. **Future Development Roadmap**:
   - Real bank API integrations
   - Mobile app version
   - Machine learning for optimal redemption suggestions
   - Social features (point gifting, etc.)

## Troubleshooting Common Replit Issues

1. **App Not Running**: Check if your `.replit` file is configured correctly
   
2. **Database Connection Issues**: Verify Replit Database is properly initialized
   
3. **CORS Errors**: Ensure your Express app has proper CORS configuration
   
4. **Environment Variables**: Check if all required secrets are set in Replit Secrets
   
5. **Memory Limitations**: Optimize your code if you hit Replit's memory limits

Remember to keep your app focused on core functionality for the hackathon and emphasize the user experience. The mock data approach allows you to showcase the concept without needing real bank integrations, making it perfect for a hackathon setting while still being fully functional within Replit's environment.